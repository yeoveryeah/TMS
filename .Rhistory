}
# Gibbs output
nsamples = 1e3
system.time({
gibbs.fit.default <- tms.fit(nsamples =nsamples, y=y, q=20, tran_prior = tran_prior,
var_prior = var_prior, par.out = TRUE,s.out=TRUE)
})
saveRDS(list(gibbs.fit = gibbs.fit, gibbs.fit.default = gibbs.fit.default), file = "InfChk.rds")
InfChk <- readRDS("InfChk.rds")
gibbs.fit <- InfChk$gibbs.fit
default.prior <- FALSE #Will check both: TRUE/FALSE
if(default.prior){
tran_prior <- list(shape1=1, shape2=1)
var_prior <- list(shape=1/2, rate=1/2)
}else{
x <- rexp(4)
tran_prior <-list(shape1=x[1], shape2=x[2])
var_prior <- list(shape=x[3], rate=x[4])
}
system.time({
gibbs.fit <- tms.fit(nsamples =nsamples, y=y, q=20, tran_prior = tran_prior,
var_prior = var_prior, par.out = TRUE,s.out=TRUE)
})
tran_prior
saveRDS(list(tran_prior=tran_prior, gibbs.fit=gibbs.fit, gibbs.fit.default=gibbs.fit.default),file="InfChk.rds")
getwd()
InfChk <- readRDS("InfChk.rds")
gibbs.fit <- InfChk$gibbs.fit
gibbs.Theta <- gibbs.fit[["Theta"]]
gibbs.sigma1 <- gibbs.Theta[,"sigma1"]
gibbs.p12 <- gibbs.Theta[,"p12"]
gibbs.p21 <- gibbs.Theta[,"p21"]
tran_prior <- InfChk$tran
# Vissual Check analytic posterior
# ---- Check for sigma1^2
plot(gibbs.sigma1, ylab = expression(sigma[1]*" | "*S[t]), xlab = "Index",
main = expression("Scatter Plot of "*sigma[1]*" | "*S[t]))
abline(h=mean(gibbs.sigma1), col="red")
# ---- Check for transition probabilities
S <- gibbs.fit[["S"]][nsamples,]
tran.count <- trans.num(S)
n_12 <- tran.count$n12;n_11 <-tran.count$n11
n_21 <- tran.count$n21;n_22 <-tran.count$n22
par(mfrow=c(1,2))
# p12
hist(gibbs.p12, freq = FALSE, breaks = 1e2, xlab = "p12",
main = "Posterior Check for p12 with default prior", col = "grey")
curve(dbeta(x,tran_prior$shape1+n_12, tran_prior$shape2+n_11),  col="red", add = TRUE)
abline(v=qbeta(0.025,tran_prior$shape1+n_12, tran_prior$shape2+n_11), col="orange")
abline(v=qbeta(0.975,tran_prior$shape1+n_12, tran_prior$shape2+n_11),col="orange")
# p21
hist(gibbs.p21, freq = FALSE,breaks = 1e2,xlab = "p21",
main = "Posterior Check for p12 with default prior", col ="grey")
curve(dbeta(x,tran_prior$shape1+n_21, tran_prior$shape2+n_22),  col="red", add = TRUE)
abline(v=qbeta(0.025,tran_prior$shape1+n_21, tran_prior$shape2+n_22), col="orange")
abline(v=qbeta(0.975,tran_prior$shape1+n_21, tran_prior$shape2+n_22),col="orange")
gibbs.fit.default <- InfChk$gibbs.fit.default
gibbs.Theta <- gibbs.fit.default[["Theta"]]
gibbs.sigma1 <- gibbs.Theta[,"sigma1"]
gibbs.p12 <- gibbs.Theta[,"p12"]
gibbs.p21 <- gibbs.Theta[,"p21"]
# Vissual Check analytic posterior
# ---- Check for sigma1^2
plot(gibbs.sigma1, ylab = expression(sigma[1]*" | "*S[t]), xlab = "Index",
main = expression("Scatter Plot of "*sigma[1]*" | "*S[t]))
abline(h=mean(gibbs.sigma1), col="red")
# ---- Check for transition probabilities
S <- gibbs.fit.default[["S"]][nsamples,]
tran.count <- trans.num(S)
n_12 <- tran.count$n12;n_11 <-tran.count$n11
n_21 <- tran.count$n21;n_22 <-tran.count$n22
par(mfrow=c(1,2))
# p12
hist(gibbs.p12, freq = FALSE, breaks = 1e2, xlab = "p12",
main = "Posterior Check for p12 with default prior", col = "grey")
curve(dbeta(x,1+n_12, 1+n_11),  col="red", add = TRUE)
abline(v=qbeta(0.025,1+n_12, 1+n_11), col="orange")
abline(v=qbeta(0.975,1+n_12, 1+n_11),col="orange")
# p21
hist(gibbs.p21, freq = FALSE,breaks = 1e2,xlab = "p21",
main = "Posterior Check for p12 with default prior", col ="grey")
curve(dbeta(x,1+n_21, 1+n_22),  col="red", add = TRUE)
abline(v=qbeta(0.025,1+n_21, 1+n_22), col="orange")
abline(v=qbeta(0.975,1+n_21, 1+n_22),col="orange")
knitr::opts_chunk$set(echo = FALSE) # By default, hide code; set to TRUE to see code
knitr::opts_chunk$set(fig.pos = 'p') # Places figures on their own pages
knitr::opts_chunk$set(out.width = '100%', dpi=300) # Figure resolution and size
knitr::opts_chunk$set(fig.env="figure") # Latex figure environment
library(dplyr)
library(tidyr)
library(ggplot2)
library(xtable) # Creates tables that follow OUP guidelines; other options, such as kable, may also be workable
out <- readRDS("out.rds")
View(out)
create_data_frame <- function(indices, vec, res){
q_lst <-NULL
mean_lst <-NULL
med_lst <-NULL
std_lst <-NULL
pvl_lst <-NULL
for (i in indices){
cur <- res[i][[1]]
VR <- cur$out$VR[,1]
q_lst<-c(q_lst,vec[i])
mean_lst<-c(mean_lst, mean(VR,na.rm = TRUE))
med_lst<-c(med_lst,median(VR,na.rm = TRUE))
std_lst<-c(std_lst,sd(VR,na.rm = TRUE))
pvl_lst<-c(pvl_lst,cur$pval)
}
data.frame(Q=q_lst, Mean = mean_lst,Median=med_lst,Stand_Dev=std_lst,P_Val=pvl_lst)
}
before_2008<-create_data_frame(c(6,9,11,15,18),vec,before2008_res)
before2008_res <- out$b2008
crisis_res <- out$a2008
post2018_res <- out$p2018
rm(out)
create_data_frame <- function(indices, vec, res){
q_lst <-NULL
mean_lst <-NULL
med_lst <-NULL
std_lst <-NULL
pvl_lst <-NULL
for (i in indices){
cur <- res[i][[1]]
VR <- cur$out$VR[,1]
q_lst<-c(q_lst,vec[i])
mean_lst<-c(mean_lst, mean(VR,na.rm = TRUE))
med_lst<-c(med_lst,median(VR,na.rm = TRUE))
std_lst<-c(std_lst,sd(VR,na.rm = TRUE))
pvl_lst<-c(pvl_lst,cur$pval)
}
data.frame(Q=q_lst, Mean = mean_lst,Median=med_lst,Stand_Dev=std_lst,P_Val=pvl_lst)
}
before_2008<-create_data_frame(c(6,9,11,15,18),vec,before2008_res)
vec <- seq(from=1,to=100,by=5)
create_data_frame <- function(indices, vec, res){
q_lst <-NULL
mean_lst <-NULL
med_lst <-NULL
std_lst <-NULL
pvl_lst <-NULL
for (i in indices){
cur <- res[i][[1]]
VR <- cur$out$VR[,1]
q_lst<-c(q_lst,vec[i])
mean_lst<-c(mean_lst, mean(VR,na.rm = TRUE))
med_lst<-c(med_lst,median(VR,na.rm = TRUE))
std_lst<-c(std_lst,sd(VR,na.rm = TRUE))
pvl_lst<-c(pvl_lst,cur$pval)
}
data.frame(Q=q_lst, Mean = mean_lst,Median=med_lst,Stand_Dev=std_lst,P_Val=pvl_lst)
}
before_2008<-create_data_frame(c(6,9,11,15,18),vec,before2008_res)
fin_cris<-create_data_frame(c(6,9,11,15,18),vec,crisis_res)
after_2018<-create_data_frame(c(6,9,11,15,18),vec,post2018_res)
require(kableExtra)
vec <- c(seq(from=1,to=100,by=5))
kable(before_2008, booktabs = TRUE, "latex",
caption = "Variance Ratio for Daily Returns of SP500, 2004 - 2008") %>%
kable_styling(latex_options = c("HOLD_position"))
kable(after_2018, booktabs = TRUE, "latex",
caption = "Variance Ratio for Daily Returns of SP500, 2008 - 2009") %>%
kable_styling(latex_options = c("HOLD_position"))
kable(after_2018, booktabs = TRUE, "latex",
caption = "Variance Ratio for Daily Returns of SP500, 2008 - 2009") %>%
kable_styling(latex_options = c("HOLD_position"))
```{r echo=FALSE}
require(TMS)
InfChk <- readRDS("InfChk.rds")
gibbs.fit <- InfChk$gibbs.fit
gibbs.fit.default <- InfChk$gibbs.fit.default
rm(InfChk)
gibbs.Theta <- gibbs.fit[["Theta"]]
gibbs.sigma1 <- gibbs.Theta[,"sigma1"]
gibbs.p12 <- gibbs.Theta[,"p12"]
gibbs.p21 <- gibbs.Theta[,"p21"]
tran_prior <- InfChk$tran
```{r echo=FALSE}
require(TMS)
InfChk <- readRDS("InfChk.rds")
gibbs.fit <- InfChk$gibbs.fit
gibbs.fit.default <- InfChk$gibbs.fit.default
rm(InfChk)
gibbs.Theta <- gibbs.fit[["Theta"]]
gibbs.sigma1 <- gibbs.Theta[,"sigma1"]
gibbs.p12 <- gibbs.Theta[,"p12"]
gibbs.p21 <- gibbs.Theta[,"p21"]
tran_prior <- InfChk$tran
```{r echo=FALSE}
require(TMS)
InfChk <- readRDS("InfChk.rds")
gibbs.fit <- InfChk$gibbs.fit
gibbs.fit.default <- InfChk$gibbs.fit.default
rm(InfChk)
gibbs.Theta <- gibbs.fit[["Theta"]]
gibbs.sigma1 <- gibbs.Theta[,"sigma1"]
gibbs.p12 <- gibbs.Theta[,"p12"]
gibbs.p21 <- gibbs.Theta[,"p21"]
tran_prior <- InfChk$tran
getwd
getwd()
knitr::opts_chunk$set(echo = FALSE) # By default, hide code; set to TRUE to see code
knitr::opts_chunk$set(fig.pos = 'p') # Places figures on their own pages
knitr::opts_chunk$set(out.width = '100%', dpi=300) # Figure resolution and size
knitr::opts_chunk$set(fig.env="figure") # Latex figure environment
library(dplyr)
library(tidyr)
library(ggplot2)
library(xtable) # Creates tables that follow OUP guidelines; other options, such as kable, may also be workable
require(kableExtra)
before_2008_data <- filter(daily_data, Date <= as.Date('2008-01-01'))
knitr::opts_chunk$set(echo = FALSE) # By default, hide code; set to TRUE to see code
knitr::opts_chunk$set(fig.pos = 'p') # Places figures on their own pages
knitr::opts_chunk$set(out.width = '100%', dpi=300) # Figure resolution and size
knitr::opts_chunk$set(fig.env="figure") # Latex figure environment
library(dplyr)
library(tidyr)
library(ggplot2)
library(xtable) # Creates tables that follow OUP guidelines; other options, such as kable, may also be workable
require(kableExtra)
out <- readRDS("out.rds")
spx_data = lapply(c('../data/SPX_2004_2019.txt','../data/SPX_2020_2020.txt'),
function(x){
read.delim2(x, header = FALSE, sep = "\t")%>%
separate("V1",c("DateTime", "Open", "High", "Low", "Close"),sep = ",")
}) %>%  bind_rows()
spx_data$DateTime <- gsub('\\.', '-', spx_data$DateTime)
daily_data<- data.frame(Date = as.Date(spx_data$DateTime), value = as.numeric(spx_data$Open))
daily_data<- subset(daily_data, !duplicated(daily_data$Date, fromLast=T))
ggplot(daily_data, aes(x = Date, y = value)) +
geom_line() + ggtitle("S&P 500 daily data")
diff_daily <- diff(daily_data$value)
hist(diff_daily,main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
before_2008_data <- filter(daily_data, Date <= as.Date('2008-01-01'))
fin_crisis_data <- filter(daily_data, Date <= as.Date('2009-10-01'))
post_2018_data <- filter(daily_data, Date >= as.Date('2018-01-01'))
ggplot(data.frame(Date = daily_data$Date[-1], value =diff_daily), aes(x = Date, y = value)) +
geom_line() + geom_vline(xintercept = as.Date('2008-01-01'))+ggtitle("SPX daily return")
ggplot(data.frame(Date = before_2008_data$Date[-1], value =diff(before_2008_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return between 2004 and 2008")
ggplot(data.frame(Date = fin_crisis_data$Date[-1], value =diff(fin_crisis_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return in Financial Crisis")
ggplot(data.frame(Date = post_2018_data$Date[-1], value =diff(post_2018_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return after 2018")
before_2008_data <- filter(daily_data, Date <= as.Date('2008-01-01'))
fin_crisis_data <- filter(daily_data, Date <= as.Date('2009-10-01'))
post_2018_data <- filter(daily_data, Date >= as.Date('2018-01-01'))
ggplot(data.frame(Date = daily_data$Date[-1], value =diff_daily), aes(x = Date, y = value)) +
geom_line() + geom_vline(xintercept = as.Date('2008-01-01'), colour = "orange")+ggtitle("SPX daily return")
ggplot(data.frame(Date = before_2008_data$Date[-1], value =diff(before_2008_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return between 2004 and 2008")
ggplot(data.frame(Date = fin_crisis_data$Date[-1], value =diff(fin_crisis_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return in Financial Crisis")
ggplot(data.frame(Date = post_2018_data$Date[-1], value =diff(post_2018_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return after 2018")
before_2008_data <- filter(daily_data, Date <= as.Date('2008-01-01'))
fin_crisis_data <- filter(daily_data, Date <= as.Date('2009-10-01'))
post_2018_data <- filter(daily_data, Date >= as.Date('2018-01-01'))
ggplot(data.frame(Date = daily_data$Date[-1], value =diff_daily), aes(x = Date, y = value)) +
geom_line() + geom_vline(
xintercept = c(as.Date('2008-01-01'),as.Date('2009-10-01'),as.Date('2018-01-01')),
colour = c("orange", "brown", "red"))+
ggtitle("SPX daily return")
ggplot(data.frame(Date = before_2008_data$Date[-1], value =diff(before_2008_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return between 2004 and 2008")
ggplot(data.frame(Date = fin_crisis_data$Date[-1], value =diff(fin_crisis_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return in Financial Crisis")
ggplot(data.frame(Date = post_2018_data$Date[-1], value =diff(post_2018_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return after 2018")
before_2008_data <- filter(daily_data, Date <= as.Date('2008-01-01'))
fin_crisis_data <- filter(daily_data, Date <= as.Date('2009-10-01'))
post_2018_data <- filter(daily_data, Date >= as.Date('2018-01-01'))
par(mfrow=c(2,2))
ggplot(data.frame(Date = daily_data$Date[-1], value =diff_daily), aes(x = Date, y = value)) +
geom_line() + geom_vline(
xintercept = c(as.Date('2008-01-01'),as.Date('2009-10-01'),as.Date('2018-01-01')),
colour = c("orange", "brown", "red"))+
ggtitle("SPX daily return")
ggplot(data.frame(Date = before_2008_data$Date[-1], value =diff(before_2008_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return between 2004 and 2008")
ggplot(data.frame(Date = fin_crisis_data$Date[-1], value =diff(fin_crisis_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return in Financial Crisis")
ggplot(data.frame(Date = post_2018_data$Date[-1], value =diff(post_2018_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return after 2018")
before_2008_data <- filter(daily_data, Date <= as.Date('2008-01-01'))
fin_crisis_data <- filter(daily_data, Date <= as.Date('2009-10-01'))
post_2018_data <- filter(daily_data, Date >= as.Date('2018-01-01'))
par(mfrow=c(2,2))
p1<-ggplot(data.frame(Date = daily_data$Date[-1], value =diff_daily), aes(x = Date, y = value)) +
geom_line() + geom_vline(
xintercept = c(as.Date('2008-01-01'),as.Date('2009-10-01'),as.Date('2018-01-01')),
colour = c("orange", "brown", "red"))+
ggtitle("SPX daily return")
p2<-ggplot(data.frame(Date = before_2008_data$Date[-1], value =diff(before_2008_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return between 2004 and 2008")
p3<-ggplot(data.frame(Date = fin_crisis_data$Date[-1], value =diff(fin_crisis_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return in Financial Crisis")
p4 <- ggplot(data.frame(Date = post_2018_data$Date[-1], value =diff(post_2018_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return after 2018")
grid.arrange(p1,p2,p3,p4, nrow=2)
library(ggridges)
ggarrange(p1,p2,p3,p4, nrow=2)
before_2008_data <- filter(daily_data, Date <= as.Date('2008-01-01'))
fin_crisis_data <- filter(daily_data, Date <= as.Date('2009-10-01'))
post_2018_data <- filter(daily_data, Date >= as.Date('2018-01-01'))
par(mfrow=c(2,2))
p1<-ggplot(data.frame(Date = daily_data$Date[-1], value =diff_daily), aes(x = Date, y = value)) +
geom_line() + geom_vline(
xintercept = c(as.Date('2008-01-01'),as.Date('2009-10-01'),as.Date('2018-01-01')),
colour = c("orange", "brown", "red"))+
ggtitle("SPX daily return")
p2<-ggplot(data.frame(Date = before_2008_data$Date[-1], value =diff(before_2008_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return between 2004 and 2008")
p3<-ggplot(data.frame(Date = fin_crisis_data$Date[-1], value =diff(fin_crisis_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return in Financial Crisis")
p4 <- ggplot(data.frame(Date = post_2018_data$Date[-1], value =diff(post_2018_data$value)), aes(x = Date, y = value)) +
geom_line() + ggtitle("SPX daily return after 2018")
ggarrange(p1,p2,p3,p4, nrow=2)
grid.arrange(p1,p2,p3,p4, nrow=2)
require(grid)
require(gridExtra)
grid.arrange(p1,p2,p3,p4, nrow=2)
knitr::opts_chunk$set(echo = FALSE) # By default, hide code; set to TRUE to see code
knitr::opts_chunk$set(fig.pos = 'p') # Places figures on their own pages
knitr::opts_chunk$set(out.width = '100%', dpi=300) # Figure resolution and size
knitr::opts_chunk$set(fig.env="figure") # Latex figure environment
library(dplyr)
library(tidyr)
library(ggplot2)
library(xtable) # Creates tables that follow OUP guidelines; other options, such as kable, may also be workable
require(kableExtra)
require(gridExtra)
ggplot(daily_data, aes(x = Date, y = value)) +
geom_line() + ggtitle("S&P 500 daily data")
diff_daily <- diff(daily_data$value)
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
spx_data = lapply(c('../data/SPX_2004_2019.txt','../data/SPX_2020_2020.txt'),
function(x){
read.delim2(x, header = FALSE, sep = "\t")%>%
separate("V1",c("DateTime", "Open", "High", "Low", "Close"),sep = ",")
}) %>%  bind_rows()
spx_data$DateTime <- gsub('\\.', '-', spx_data$DateTime)
daily_data<- data.frame(Date = as.Date(spx_data$DateTime), value = as.numeric(spx_data$Open))
daily_data<- subset(daily_data, !duplicated(daily_data$Date, fromLast=T))
ggplot(daily_data, aes(x = Date, y = value)) +
geom_line() + ggtitle("S&P 500 daily data")
diff_daily <- diff(daily_data$value)
plot(diff_daily, xlab = "Date", ylab = expression(Delta*X[n]),
main = expression("GSPC: Log-Returns "*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
spx_data = lapply(c('../data/SPX_2004_2019.txt','../data/SPX_2020_2020.txt'),
function(x){
read.delim2(x, header = FALSE, sep = "\t")%>%
separate("V1",c("DateTime", "Open", "High", "Low", "Close"),sep = ",")
}) %>%  bind_rows()
spx_data$DateTime <- gsub('\\.', '-', spx_data$DateTime)
daily_data<- data.frame(Date = as.Date(spx_data$DateTime), value = as.numeric(spx_data$Open))
daily_data<- subset(daily_data, !duplicated(daily_data$Date, fromLast=T))
ggplot(daily_data, aes(x = Date, y = value)) +
geom_line() + ggtitle("S&P 500 daily data")
diff_daily <- diff(daily_data$value)
plot(diff_daily, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("GSPC: Log-Returns "*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
spx_data = lapply(c('../data/SPX_2004_2019.txt','../data/SPX_2020_2020.txt'),
function(x){
read.delim2(x, header = FALSE, sep = "\t")%>%
separate("V1",c("DateTime", "Open", "High", "Low", "Close"),sep = ",")
}) %>%  bind_rows()
spx_data$DateTime <- gsub('\\.', '-', spx_data$DateTime)
daily_data<- data.frame(Date = as.Date(spx_data$DateTime), value = as.numeric(spx_data$Open))
daily_data<- subset(daily_data, !duplicated(daily_data$Date, fromLast=T))
ggplot(daily_data, aes(x = Date, y = value)) +
geom_line() + ggtitle("S&P 500 daily data")
diff_daily <- diff(daily_data$value)
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("GSPC: Log-Returns "*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
ggplot(daily_data, aes(x = Date, y = value)) +
geom_histogram() + ggtitle("S&P 500 daily data")
ggplot(daily_data, aes(x = Date, y = value)) +
geom_histogram(binwidth = =0.1) + ggtitle("S&P 500 daily data")
diff_daily <- diff(daily_data$value)
ggplot(daily_data, aes(x = Date, y = value)) +
geom_histogram(binwidth =0.1) + ggtitle("S&P 500 daily data")
ggplot(daily_data, aes(x = Date, y = value)) +
geom_histogram(binwidth =100) + ggtitle("S&P 500 daily data")
ggplot(daily_data, aes(x = Date, y = value)) +
geom_histogram() + ggtitle("S&P 500 daily data")
spx_data = lapply(c('../data/SPX_2004_2019.txt','../data/SPX_2020_2020.txt'),
function(x){
read.delim2(x, header = FALSE, sep = "\t")%>%
separate("V1",c("DateTime", "Open", "High", "Low", "Close"),sep = ",")
}) %>%  bind_rows()
spx_data$DateTime <- gsub('\\.', '-', spx_data$DateTime)
daily_data<- data.frame(Date = as.Date(spx_data$DateTime), value = as.numeric(spx_data$Open))
daily_data<- subset(daily_data, !duplicated(daily_data$Date, fromLast=T))
ggplot(daily_data, aes(x = Date, y = value)) +
geom_line() + ggtitle("S&P 500 daily data")
diff_daily <- diff(daily_data$value)
ggplot(daily_data, aes(x = Date, y = value)) +
geom_histogram() + ggtitle("S&P 500 daily data")
ggplot(daily_data, aes(x = Date, y = value), after_stat(density)) +
geom_histogram() + ggtitle("S&P 500 daily data")
spx_data = lapply(c('../data/SPX_2004_2019.txt','../data/SPX_2020_2020.txt'),
function(x){
read.delim2(x, header = FALSE, sep = "\t")%>%
separate("V1",c("DateTime", "Open", "High", "Low", "Close"),sep = ",")
}) %>%  bind_rows()
spx_data$DateTime <- gsub('\\.', '-', spx_data$DateTime)
daily_data<- data.frame(Date = as.Date(spx_data$DateTime), value = as.numeric(spx_data$Open))
daily_data<- subset(daily_data,!duplicated(daily_data$Date, fromLast=T))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(diff_daily)), col="darkblue", lwd=2, add=TRUE, yaxt="n"))
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(diff_daily)), col="darkblue", lwd=2, add=TRUE)
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(var(diff_daily)), col="darkblue", lwd=2, add=TRUE)
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(var(diff_daily)), col="darkblue", lwd=2, add=TRUE))
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(var(diff_daily)), col="red", lwd=2, add=TRUE))
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(var(diff_daily)), col="red", add=TRUE))
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Frequency')
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(var(diff_daily))), col="red", add=TRUE)
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "SPX daily return histogram", xlab = 'Daily return', ylab='Density', freq = FALSE)
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(var(diff_daily))), col="red", add=TRUE)
par(mfrow =c(2,2))
plot(daily_data, xlab = "Date", ylab = expression(Delta*X[n]),type = "l",
main = expression("S&P 500 daily data"*(Delta*X[n])))
hist(diff_daily,breaks = 100, main = "S&P 500 daily return histogram", xlab = 'Daily return', ylab='Density', freq = FALSE)
curve(dnorm(x, mean = mean(diff_daily), sd=sqrt(var(diff_daily))), col="red", add=TRUE)
diff_daily <- diff(daily_data)
diff_daily
devtools::install()
usethis::use_package_doc()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
usethis::use_package_doc()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
devtools::install()
devtools::check()
install.packages('TMS')
getwd()
setwd("~/Desktop/MMath/Z. Term2_20W/STAT 840/Final Project/0. Submission")
install.packages('TMS')
require('devtools')
install.packages('devtools')
devtools::install()
setwd("~/Desktop/MMath/Z. Term2_20W/STAT 840/Final Project/0. Submission/TMS")
devtools::install()
require(TMS)
install.packages("bayesvl")
